# Default values for ld-relay.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  # Use the official LaunchDarkly relay proxy image
  repository: launchdarkly/ld-relay
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

pod:
  # Annotations to add to the pod.
  annotations: {}
  # Labels to add to the pod.
  labels: {}
  # Security context applied to the pod.
  securityContext: {}
    # fsGroup: 2000
  # PriorityClassName to apply to the pod.
  priorityClassName: ""
  distruptionBudget:
    # Specifies whether a pdb should be created
    enabled: false
    # Number of pods that are available after eviction as number or percentage (eg.: 50% or 2)
    ## Defaults to 0 if not specified
    minAvailable: ""
    # Number of pods that are unavailable after eviction as number or percentage (eg.: 50% or 2).
    # Only one of (minavailable or maxUnavailable) can be specificed.
    # Has higher precedence over `podDisruptionBudget.minAvailable`
    maxUnavailable: ""
  # Adds topology spread constraints to the relay deployment
  # If labelSelector is left out, it will default to the labelSelector configuration of the deployment (Recommended)
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-internal: "true"
  ports:
    # WARN: Do not modify the name of this port mapping. It is referenced by other parts of this configuration
    - port: 8030
      targetPort: 8030
      protocol: TCP
      name: api
    # Prometheus support requires exposing additional ports
    # - port: 8031
    #   targetPort: 8031
    #   protocol: TCP
    #   name: prometheus

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
  # Exposing the relay allows for access outside the cluster
  #   - host: api.ld-relay.local
  #     paths:
  #       - path: /
  #         pathType: ImplementationSpecific
  #         port: 8030
  # You may optionally need to expose the Prometheus endpoint as well
  #   - host: prometheus.ld-relay.local
  #     paths:
  #       - path: /
  #         pathType: ImplementationSpecific
  #         port: 8031
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

relay:
  # Specify the relay environment variables here to load them into this chart's ConfigMap directly.
  # These environment variables should match the ones documented by the relay proxy at https://github.com/launchdarkly/ld-relay
  environment: {}
    # LD_ENV_MyEnvironment: your-sdk-key
    # USE_REDIS: true

  # Because the `relay.environment` configuration is loaded into a ConfigMap, values must be simple string key/value
  # pairs. It does not support more complex variable querying such as `valueFrom.fieldRef.fieldPath`.
  #
  # `relay.environmentVariables` allows providing these more complex `valueFrom` style variable configurations. Standard
  # name/value environment variable configuration is also supported, though not necessary as it is somewhat redundant
  # with `relay.environment`.
  environmentVariables: []
    # - name: RUNNING_HOST
    #   valueFrom:
    #     fieldRef:
    #       fieldPath: status.hostIP

  # Use k8s secrets to either set environment variables or to mount secrets as files in the relay container.
  secrets: []
    # Set environment variables in the relay container with values pulled from k8s secrets by specifying the envName property.
    # These environment variables should match the ones documented by the relay proxy at https://github.com/launchdarkly/ld-relay
    # - envName: REDIS_PASSWORD
    #   secretName: relay-proxy
    #   secretKey: redis-password
    #
    # Setting volumePath will mount the specified secret as a file into the container.
    # All file paths are stored under /mnt/secrets
    # - volumePath: path
    #   secretName: relay-proxy
    #   secretKey: redis-password

  # Use k8s secrets to set envFrom. This differs from `secrets` as this dynamically sets the environment variables from
  # the key value pairs in the k8s secret.
  envFromSecret: ~

  # Default liveness and readiness probes for the relay. This assumes the relay will be running in the standard non-TLS mode.
  #
  # If TLS is enabled, you will need to update this scheme to use HTTPS. You can do this by setting:
  #
  # relay:
  #   livenessProbe:
  #     httpGet:
  #       scheme: HTTPS
  #   readinessProbe:
  #     httpGet:
  #       scheme: HTTPS
  #
  # If you wish to fully disable both probes, you can do so by setting:
  #
  # relay:
  #   livenessProbe: null
  #   readinessProbe: null
  livenessProbe:
    httpGet:
      path: /status
      port: api
  readinessProbe:
      httpGet:
        path: /status
        port: api


  # Enables mounting a k8s volume onto the relay container.
  #
  # This configuration option is used to optionally provide access to an
  # existing relay proxy configuration file, or to provide access to an offline
  # file.
  volume:
    # config should specify the path to the configuration file, relative to the
    # root of the provided volume. If left blank, the relay will be configured
    # ONLY using environment variables provided in the above two sections.
    config: ~

    # offline should specify the path to the offline file, relative to the root
    # of the provided volume. If left blank, offline mode will be disabled.
    # Setting this file will enable offline mode (by setting the FILE_DATA_SOURCE
    # environment variable).
    offline: ~

    # Provide the volume definition required to access either the config or the
    # offline files.
    #
    # Any type of volume supported by k8s should work in the volume setting.
    # Refer to the https://kubernetes.io/docs/concepts/storage/volumes/
    # documentation for more information.
    definition: {}
    #   persistentVolumeClaim:
    #     claimName: ld-relay-pvc
